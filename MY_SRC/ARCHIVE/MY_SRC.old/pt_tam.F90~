MODULE pttam
#ifdef key_tam
!2017-02-10/16 separated TAM  passive tracer time step loops from nemogcm_tam.F90

  USE par_oce
  USE domain
  USE oce
  USE oce_tam
  USE sbc_oce_tam
  USE sol_oce_tam
  USE tamctl
  USE iom
  USE trj_tam
  USE wrk_nemo, ONLY: wrk_alloc
  USE step_tam, ONLY: stp_tan, stp_adj
  USE step_oce_tam
  !!!! For initialisation as in test subroutine of OPATAM_SRC/step.F90
  !!!! 2016-07-21: added qrp_ad, erp_ad
  USE sbcssr_tam, ONLY: qrp_tl, erp_tl, qrp_ad, erp_ad
  !!!! 2016-06-20: added adjoint time stepping loop
  USE sbcfwb_tam, ONLY: a_fwb_tl, a_fwb_ad

#  include "domzgr_substitute.h90"

  IMPLICIT NONE

  !!!! 2016-06-20: added adjoint time stepping loop
  INTEGER :: jk
  
  ! Variable declaration
  REAL(KIND=wp), POINTER, DIMENSION(:,:,:) :: ztn_tlin
  INTEGER:: ncid

  ! 2016-06-21 added global mask used to select region
  REAL(wp), PUBLIC, ALLOCATABLE, SAVE, DIMENSION(:,:,:) :: tmsk_region
  REAL(wp), PUBLIC, ALLOCATABLE, SAVE, DIMENSION(:,:,:) :: tmsk_nasmw !!! 2016-08-19 added new variable to create edw mask

CONTAINS 

  SUBROUTINE pt_init

    !!!! 2016-06-21 added global mask used to select region
    IF (.NOT.ALLOCATED(tmsk_region)) ALLOCATE(tmsk_region(jpi, jpj, jpk))
    !!!! 2016-08-23
    IF (.NOT.ALLOCATED(tmsk_nasmw)) ALLOCATE(tmsk_nasmw(jpi, jpj, jpk))

    !!!! 2016-06-21 added global mask used to select region
    tmsk_region(:,:,:) = 0._wp
    !!!! 2016-08-23
    tmsk_nasmw(:,:,:) = 0._wp

  END SUBROUTINE pt_init

  SUBROUTINE pt_finalise

    !!!! 2016-06-21 added global mask used to select region
    DEALLOCATE(tmsk_region)
    !!!! 2016-08-23
    DEALLOCATE(tmsk_nasmw)

  END SUBROUTINE pt_finalise

  SUBROUTINE pt_tan

  INTEGER::istep
    
    ! Initialisation as in test subroutine of OPATAM_SRC/step.F90
    CALL     oce_tam_init(1)
    CALL sbc_oce_tam_init(1)
    CALL sol_oce_tam_init(1)
#if defined key_tradmp
    CALL trc_oce_tam_init(1)
    strdmp_tl = 0.0_wp
    ttrdmp_tl = 0.0_wp
#endif
    qrp_tl = 0.0_wp
    erp_tl = 0.0_wp   
    emp_tl(:,:) = 0.0_wp
    a_fwb_tl = 0.0_wp

    ! Variable allocation and initialisation
    CALL wrk_alloc(jpi,jpj,jpk,ztn_tlin)
    ztn_tlin(:,:,:) = 0.0_wp

    ! Reading in of initial perturbation
    !!!! 2016-05-16 added variable for name of initial tracer distribution
    CALL iom_open(cn_tl_passive_init,ncid,kiolib = jpnf90)
    CALL iom_get(ncid,jpdom_autoglo,"Tinit",ztn_tlin,0)

#if defined key_mpp_mpi
    CALL lbc_lnk(ztn_tlin(:,:,:), 'T', 1.0_wp)
#endif

    ! 2016-06-21 added global mask used to select region
    tmsk_region(:,:,:) = ztn_tlin(:,:,:)

    ! Initialisation of TL model
    istep = nit000 - 1
    CALL trj_rea( istep, 1)
    istep = nit000

    CALL day_tam(nit000, 0)
    un_tl(:,:,:) = 0.0_wp
    vn_tl(:,:,:) = 0.0_wp
    sshn_tl(:,:) = 0.0_wp
    ! 2016-06-09 added switch and frequency for on-line resetting of NASMW
    IF (ln_tl_nasmw_auto) THEN
       WHERE ((tsn(:,:,:,jp_tem) >= 17.0_wp).AND.(tsn(:,:,:,jp_tem) <= 19.0_wp))
          tsn_tl(:,:,:,jp_tem) = ztn_tlin(:,:,:)
          tsn_tl(:,:,:,jp_sal) = ztn_tlin(:,:,:)
       END WHERE
    ELSEIF (ln_edw_auto) THEN
       tsn_tl(:,:,:,jp_tem) = tmsk_region(:,:,:)*tmsk_nasmw(:,:,:)
       tsn_tl(:,:,:,jp_sal) = tmsk_region(:,:,:)*tmsk_nasmw(:,:,:)
    ELSE
       tsn_tl(:,:,:,jp_tem) = ztn_tlin(:,:,:)
       tsn_tl(:,:,:,jp_sal) = ztn_tlin(:,:,:)
    END IF
    CALL iom_close(ncid)

    CALL istate_init_tan

    ! Time step loop
    DO istep = nit000, nitend, 1
       CALL stp_tan( istep )
    END DO

    ! Variable deallocation
    CALL wrk_dealloc(jpi, jpj, jpk, ztn_tlin)

    IF (lwp) THEN
       WRITE(numout,*)
       WRITE(numout,*) ' TL_PASSIVE: Finished!'
       WRITE(numout,*) ' ---------------------'
       WRITE(numout,*)
    ENDIF
    CALL flush(numout)

    ! 2016-06-20: added adjoint time stepping loop
  END SUBROUTINE pt_tan

SUBROUTINE pt_adj

  INTEGER::istep
  
  CALL trj_rea(nit000-1, 1)
  DO istep = nit000, nitend
     CALL day_tam(istep, 0)
  END DO
  CALL trj_rea(istep-1, -1)

  call oce_tam_init(2)
  call sbc_oce_tam_init(2)
  call sol_oce_tam_init(2)
  call trc_oce_tam_init(2)
#if defined key_tradmp
  strdmp_ad       = 0.0_wp
  ttrdmp_ad       = 0.0_wp
#endif
  qrp_ad          = 0.0_wp
  erp_ad          = 0.0_wp
  emp_ad(:,:)     = 0.0_wp
  a_fwb_ad        = 0.0_wp
!!!!!!

  ! Variable allocation and initialisation
  CALL wrk_alloc(jpi,jpj,jpk,ztn_tlin)
  ztn_tlin(:,:,:) = 0.0_wp
  ! Reading in of initial perturbation
  ! 2016-07-12 ported masking of initialisation from TLM (Tinit is initial distribution at start of adjoint run, ztn_tlin is the mask specified by .nc in namelist)
  CALL iom_open(cn_tl_passive_init,ncid,kiolib = jpnf90)
  CALL iom_get(ncid,jpdom_autoglo,"Tinit",ztn_tlin,0)

#if defined key_mpp_mpi
  CALL lbc_lnk(ztn_tlin(:,:,:), 'T', 1.0_wp)
#endif

  tmsk_region(:,:,:) = ztn_tlin(:,:,:)

!!!!!!! next part should be in step_tam?!
  tsn_ad(:,:,:,:) = 0.0_wp
  IF (ln_tl_nasmw_auto) THEN             !!!2016-08-09 - added tmsk_i(:,:,_) to handling of initialisation
     DO jk = 1, jpk
        WHERE ((tsn(:,:,jk,jp_tem) >= 17.0_wp).AND.(tsn(:,:,jk,jp_tem) <= 19.0_wp))
           tsn_ad(:,:,jk,jp_tem) = 1.0_wp*tmsk_i(:,:,jk)*e1t(:,:)*e2t(:,:)*fse3t(:,:,jk)
           tsn_ad(:,:,jk,jp_sal) = 1.0_wp*tmsk_i(:,:,jk)*e1t(:,:)*e2t(:,:)*fse3t(:,:,jk)
        END WHERE

     END DO
     WHERE ((tsn(:,:,1,jp_tem) >= 17.0_wp).AND.(tsn(:,:,1,jp_tem) <= 19.0_wp))
        tsn_ad(:,:,1,jp_tem) = tsn_ad(:,:,1,jp_tem) + 1.0_wp*tmsk_i(:,:,1)*e1t(:,:)*e2t(:,:)*sshn(:,:)
        tsn_ad(:,:,1,jp_sal) = tsn_ad(:,:,1,jp_sal) + 1.0_wp*tmsk_i(:,:,1)*e1t(:,:)*e2t(:,:)*sshn(:,:)
     END WHERE
  ELSE
     DO jk=1,jpk
        tsn_ad(:,:,jk,jp_tem) = 1.0_wp*tmsk_i(:,:,jk)*tmsk_region(:,:,jk)*e1t(:,:)*e2t(:,:)*fse3t(:,:,jk)
        tsn_ad(:,:,jk,jp_sal) = 1.0_wp*tmsk_i(:,:,jk)*tmsk_region(:,:,jk)*e1t(:,:)*e2t(:,:)*fse3t(:,:,jk)
     END DO
     tsn_ad(:,:,1,jp_tem) = tsn_ad(:,:,1,jp_tem)  +  1.0_wp*tmsk_i(:,:,1)*tmsk_region(:,:,1)*e1t(:,:)*e2t(:,:)*sshn(:,:)
     tsn_ad(:,:,1,jp_sal) = tsn_ad(:,:,1,jp_sal)  +  1.0_wp*tmsk_i(:,:,1)*tmsk_region(:,:,1)*e1t(:,:)*e2t(:,:)*sshn(:,:)
  ENDIF

!!! 2016-07-04 modified above code so IF was not nested inside WHERE

  un_ad(:,:,:)    = 0.0_wp
  vn_ad(:,:,:)    = 0.0_wp
  sshn_ad(:,:)    = 0.0_wp

  tsb_ad(:,:,:,:) = 0.0_wp
  ub_ad(:,:,:)    = 0.0_wp
  vb_ad(:,:,:)    = 0.0_wp
  sshb_ad(:,:)    = 0.0_wp

  DO istep = nitend, nit000, -1
     CALL stp_adj(istep)
  END DO

  CALL istate_init_adj

  CALL tl_trj_wri(nit000-1, 1)



END SUBROUTINE pt_adj

#endif
END MODULE pttam
